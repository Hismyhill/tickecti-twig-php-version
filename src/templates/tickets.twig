{% extends "base.twig" %}

{% block title %}Tickets - Ticketi{% endblock %}

{% block content %}
<div class="flex h-screen bg-gray-50">

  {# âœ… Include the shared sidebar #}
  {% include "/components/_sidebar.twig" with { active: "tickets" } %}

  <div id="ticket-main"
       class="flex-1 overflow-y-auto transition-all duration-300 relative z-0  ml-4 md:pl-64 p-8">

    <!-- Header -->
    <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-8">
      <div>
        <h1 class="text-2xl font-bold text-gray-800">Tickets</h1>
        <p class="text-gray-600 mt-1">Manage and track your tickets</p>
      </div>
      <div class="mt-4 sm:mt-0 flex gap-4">
        <button id="createTicketBtn"
                class="btn bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 px-4 rounded-lg flex items-center gap-2">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                  d="M12 4v16m8-8H4"/>
          </svg>
          New Ticket
        </button>
      </div>
    </div>

    <!-- Filters -->
    <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-4 mb-6">
      <div class="flex flex-wrap items-center gap-4">
        <div class="flex-1 flex gap-2" id="filterButtons">
          {% for status in ['all', 'open', 'in-progress', 'closed'] %}
            <button data-filter="{{ status }}"
                    class="filter-btn px-4 py-2 rounded-lg font-medium transition-colors {% if status == 'all' %}bg-blue-50 text-blue-600{% else %}text-gray-600 hover:bg-gray-50{% endif %}">
              {{ status|capitalize|replace({'-':' '}) }}
            </button>
          {% endfor %}
        </div>
      </div>
    </div>

    <!-- Tickets Grid -->
    <div id="ticketsGrid" class="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
      <template id="ticket-template">
        <div class="bg-white shadow-sm border border-gray-200 rounded-lg p-4 relative hover:shadow-md transition-shadow">
          <div class="flex justify-between items-start mb-3">
            <h3 class="font-semibold text-gray-800"></h3>
            <span class="text-xs px-2 py-1 rounded-full"></span>
          </div>
          <p class="text-sm text-gray-500 mb-4"></p>
          <div class="flex justify-between items-center">
            <span class="text-xs text-gray-500"></span>
            <div class="flex gap-3">
              <button class="edit-btn text-blue-600 text-sm hover:text-blue-800">Edit</button>
              <button class="delete-btn text-red-600 text-sm hover:text-red-800">Delete</button>
            </div>
          </div>
        </div>
      </template>
    </div>

  </div>
</div>

{# Modal container for creating/editing tickets #}
<div id="ticketModal" class="fixed inset-0 bg-black bg-opacity-50 items-center justify-center z-50" style="display: none;">
  <div class="bg-white p-6 rounded-lg shadow-lg w-full max-w-lg relative">
    <button id="closeModal" class="absolute top-2 right-2 text-gray-500 hover:text-gray-800">&times;</button>
    <h3 class="text-xl font-semibold mb-4" id="modalTitle">Create Ticket</h3>

    <form id="ticketForm" class="space-y-4">
      <div>
        <label class="block text-gray-700 text-sm font-medium mb-1">Title</label>
        <input type="text" name="title" class="w-full border-gray-300 rounded-lg px-3 py-2 focus:ring-blue-500" required />
      </div>

      <div>
        <label class="block text-gray-700 text-sm font-medium mb-1">Description</label>
        <textarea name="description" rows="3" class="w-full border-gray-300 rounded-lg px-3 py-2 focus:ring-blue-500"></textarea>
      </div>

      <div class="flex gap-4">
        <div class="flex-1">
          <label class="block text-gray-700 text-sm font-medium mb-1">Status</label>
          <select name="status" class="w-full border-gray-300 rounded-lg px-3 py-2 focus:ring-blue-500">
            <option value="open">Open</option>
            <option value="in-progress">In Progress</option>
            <option value="closed">Closed</option>
          </select>
        </div>

        <div class="flex-1">
          <label class="block text-gray-700 text-sm font-medium mb-1">Priority</label>
          <select name="priority" class="w-full border-gray-300 rounded-lg px-3 py-2 focus:ring-blue-500">
            <option value="low">Low</option>
            <option value="medium">Medium</option>
            <option value="high">High</option>
          </select>
        </div>
      </div>

      <div class="flex justify-end gap-3 mt-4">
        <button type="button" id="cancelModal" class="px-4 py-2 border rounded-lg text-gray-600 hover:bg-gray-100">Cancel</button>
        <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">Save</button>
      </div>
    </form>
  </div>
</div>

{% endblock %}

{% block scripts %}
<script type="module">
  import { supabase } from '/js/supabaseClient.js';

  // Get DOM elements
  const grid = document.getElementById('ticketsGrid');
  const modal = document.getElementById('ticketModal');
  const form = document.getElementById('ticketForm');
  const createBtn = document.getElementById('createTicketBtn');
  const cancelBtn = document.getElementById('cancelModal');
  const closeBtn = document.getElementById('closeModal');
  const filters = document.querySelectorAll('.filter-btn');

  let tickets = [];
  let currentFilter = 'all';
  let editingTicket = null;

  // Modal functions
  function openModal(ticket = null) {
    editingTicket = ticket;
    modal.style.display = 'flex';
    document.getElementById('modalTitle').textContent = ticket ? 'Edit Ticket' : 'Create Ticket';
    if (ticket) {
      form.title.value = ticket.title || '';
      form.description.value = ticket.description || '';
      form.status.value = ticket.status || 'open';
      form.priority.value = ticket.priority || 'low';
    } else {
      form.reset();
    }
  }

  function closeModal() {
    modal.style.display = 'none';
    editingTicket = null;
    form.reset();
  }

  // Event Listeners
  createBtn.addEventListener('click', () => openModal());
  closeBtn.addEventListener('click', closeModal);
  cancelBtn.addEventListener('click', closeModal);

  // Close modal when clicking outside
  modal.addEventListener('click', (e) => {
    if (e.target === modal) closeModal();
  });

  // Handle form submission
  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    const formData = Object.fromEntries(new FormData(form));

    try {
      if (editingTicket) {
        const { error } = await supabase
          .from('tickets')
          .update(formData)
          .eq('id', editingTicket.id);
        if (error) throw error;
      } else {
        const { data: { user } } = await supabase.auth.getUser();
        const { error } = await supabase
          .from('tickets')
          .insert([{ ...formData, user_id: user.id }]);
        if (error) throw error;
      }
      closeModal();
      fetchTickets();
    } catch (error) {
      alert(error.message);
    }
  });

  // Filter functionality
  filters.forEach(btn => {
    btn.addEventListener('click', () => {
      filters.forEach(b => {
        b.classList.remove('bg-blue-50', 'text-blue-600');
        b.classList.add('text-gray-600');
      });
      btn.classList.remove('text-gray-600');
      btn.classList.add('bg-blue-50', 'text-blue-600');
      currentFilter = btn.dataset.filter;
      renderTickets();
    });
  });

  // Initialize
  fetchTickets();
</script>
{% endblock %}
